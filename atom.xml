<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chenjf-cn.github.io/chenjf.github.io/</id>
    <title>质量保障</title>
    <updated>2022-09-05T09:04:01.173Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chenjf-cn.github.io/chenjf.github.io/"/>
    <link rel="self" href="https://chenjf-cn.github.io/chenjf.github.io/atom.xml"/>
    <subtitle>记录日常工作中遇到的问题和解决方案</subtitle>
    <logo>https://chenjf-cn.github.io/chenjf.github.io/images/avatar.png</logo>
    <icon>https://chenjf-cn.github.io/chenjf.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 质量保障</rights>
    <entry>
        <title type="html"><![CDATA[Test SDK API]]></title>
        <id>https://chenjf-cn.github.io/chenjf.github.io/post/test-sdk-api/</id>
        <link href="https://chenjf-cn.github.io/chenjf.github.io/post/test-sdk-api/">
        </link>
        <updated>2022-09-05T08:37:04.000Z</updated>
        <content type="html"><![CDATA[<p>文本主要分享SDK的基于API的测试思路<br>
#一 SDK介绍<br>
客户端SDK是为第三方开发者提供的软件开发工具包，包括SDK接口、开发文档和Demo示例等。<br>
以涂鸦 App SDK 为例, 他提供了一些物联网能力，方便开发者更加快速地连接涂鸦生态中的智能硬件产品。开发者可以基于 App SDK 快速地实现 App 功能的开发，实现对智能设备的配网、控制、固件升级、定时任务和智能场景创建等操作。整体工作流程如下图<br>
<img src="https://chenjf-cn.github.io/chenjf.github.io//post-images/1662367152577.png" alt="" loading="lazy"><br>
#二 测试对象<br>
<strong>接入文档</strong><br>
SDK 面向的是开发者，正确引导开发者接入 SDK 是必要的<br>
<strong>SDK API</strong><br>
SDK 的核心内容，也是主要测试对象<br>
<strong>Demo</strong><br>
Demo 是 SDK 提供方用来示例如何调用接口实现具体的功能，也可以作为开发者直观感受 SDK 接入效果<br>
#三 测试内容<br>
<strong>功能测试</strong>: 保证SDK接口功能正确性和完备性。客户端SDK接口测试跟服务端接口测试类似，包括场景覆盖和接口参数覆盖<br>
<strong>兼容测试</strong>: 保证SDK兼容特定的设备平台，并与其他软件兼容。根据产品需求和市场现状对需要适配的设备平台做分析，再根据需要覆盖的机型、系统版本、分辨率等进行优先覆盖排序<br>
<strong>网络测试</strong>: 保证在不同网络类型，不同网络环境下，SDK接口都能较好的处理<br>
<strong>安全测试</strong>: 对隐私数据保护，访问权限的控制，用户服务鉴权等，SDK接口的安全性问题也是比较突出。安全性很多是在架构设计和开发设计中就考虑进去，但是最好还是有专门的安全性测试<br>
<strong>性能测试</strong>: 保证SDK接口满足特定的性能需求，比如资源占用、移动设备耗电量<br>
<strong>压力测试</strong>: 考察业务场景在一定压力下，持续运行一段时间，接口功能和设备资源占用有无异常<br>
#四 测试手段<br>
对SDK测试，可以采用的分层测试方式由上至下依次有：基于Demo-&gt;基于api调用-&gt;基于源码<br>
<strong>基于Demo APP的功能测试</strong><br>
优点: 测试人员可以比较直观的看到界面表现，上手快，所以在客户端SDK测试中比较常用<br>
缺点: Demo对接口和业务场景覆盖比较有限，对接口的输入输出参数不能全覆盖，发现问题时定位复杂度增加。精心设计的Demo需要较多的开发投入资源，也使得问题暴露的时间大大滞后<br>
<strong>基于API的接口测试</strong><br>
优点: 基于接口调用的测试，包括对单个接口的测试，也包括业务场景的覆盖。这种测试方式直接有效,覆盖率高，因为SDK接口通常比较稳定，所以一旦实现并投入使用，测试效率和质量的收益都很大<br>
缺点: 测试需要一定的移动端开发基础, 对测试人员要求较高<br>
<strong>基于源码单元测试</strong><br>
优点: 单元测试是为开发代码质量保驾护航的一个重要环节，在测试左移推进的道路上，大家越来越意识到单元测试的重要价值。特别是在一些核心业务上，值得开发同学投入精力去做。<br>
缺点: 全量代码的单元测试,开发人力资源投入大, 成本高<br>
#五 基于API制定测试方案<br>
<strong>团队核心诉求</strong><br>
需要有直观的界面,能快速上手<br>
需要支持单接口的测试和多接口场景化流程的测试<br>
需要降低测试同学的使用门槛去除SDK的开发语言对测试的影响<br>
需要避免SDK开发在测试中投入过多的资源, 尽量测试左移<br>
能一站式管理用例,持续集成, 定时运行case<br>
设计方案<br>
<img src="https://chenjf-cn.github.io/chenjf.github.io//post-images/1662367579913.png" alt="" loading="lazy"><br>
<strong>核心思想</strong>: 将不同语言的SDK抽象成服务器接口摈弃SDK工具包语言的区别,统一在PC端入口调试,同时提供Test APP可以调试SDK工具包内的API<br>
<strong>SDK测试服务平台</strong><br>
提供SDK的API接口请求调用可视化页面<br>
负责SDK公版APP的通信交互和统一调度<br>
提供用例管理,定时任务,接口覆盖率统计等模块<br>
<strong>SDK Test APP</strong><br>
通过反射, AST语法树解析SDK工具包的API同步给平台<br>
提供监听器,监听平台发来的API调用命令<br>
设计执行引擎, 接收平台的API调用命令去SDK工具包内调用将执行结果同步到平台<br>
提供在手机上调试API和执行平台用例的能力<br>
<strong>方案框架图</strong><br>
<img src="https://chenjf-cn.github.io/chenjf.github.io//post-images/1662367610829.png" alt="" loading="lazy"><br>
<strong>SDK API回调函数难点解决</strong><br>
<img src="https://chenjf-cn.github.io/chenjf.github.io//post-images/1662367652337.png" alt="" loading="lazy"><br>
上面是涂鸦大部分SDK使用接口的方式,通过TuyaSdk获取一个实例对象Instance调用实例对象的API方法,传入参数和接口回调函数,如果成功调用就会回调onSuccess , 失败回调onError函数.<br>
但是这里存在一个问题, 这个方法的参数是一个回调接口, 回调接口必须实现才能,通过反射调用, 所以为了解决这个问题, 我们选择通过动态代理来代理了回调函数,  这样就解决了回调函数必须实现的问题<br>
#六 成果展示<br>
<strong>Web在线调试SDK API</strong><br>
<img src="https://chenjf-cn.github.io/chenjf.github.io//post-images/1662367738090.png" alt="" loading="lazy"><br>
<strong>Test SDK App调试API</strong><br>
<img src="https://chenjf-cn.github.io/chenjf.github.io//post-images/1662367753415.png" alt="" loading="lazy"><br>
<strong>平台测试用例持续集成</strong><br>
<img src="https://chenjf-cn.github.io/chenjf.github.io//post-images/1662367768000.png" alt="" loading="lazy"><br>
<strong>对外赋能</strong><br>
向嵌入式团队提供SDK Test App , 使嵌入式团队具有API配网的能力, 从而完成树莓派嵌入式模块的自动化持续集成<br>
<img src="https://chenjf-cn.github.io/chenjf.github.io//post-images/1662367782625.png" alt="" loading="lazy"><br>
集成树莓派内容不是本文重点, 不在详细赘述.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[业务技术图谱建设实践]]></title>
        <id>https://chenjf-cn.github.io/chenjf.github.io/post/ye-wu-ji-zhu-tu-pu-jian-she-shi-jian/</id>
        <link href="https://chenjf-cn.github.io/chenjf.github.io/post/ye-wu-ji-zhu-tu-pu-jian-she-shi-jian/">
        </link>
        <updated>2022-08-12T06:08:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-前言">一 前言</h1>
<p>在互联网行业中, 人员流动变化快, 文档沉淀少且历史编写的文档和现有业务差异大, 每个新入职同学在熟悉公司项目的时候异常的痛苦. 是否能通过一些措施帮助新同学尽快熟悉项目呢,为此做了一些思考和实践.</p>
<h1 id="二-问题">二 问题</h1>
<p>当新同学加入时, 最重要的两件事就是融入团队和理清业务.<br>
融入环境可以通过新人导师, 团队聚餐等方式融入, 此内容不是本篇重点, 不在详细展开. 接下去我们详细的说一下理清业务<br>
当一个新同学接手迭代n次的大型老系统时, 从产品角度上我们首先需要知道业务的产品矩阵和业务重点, 但是这些只能了解项目的基本情况. 互联网微服务系统架构下, 不深入了解应用系统的关联关系是无法保障被测服务的质量的. 同时微服务架构下, 大多开发只熟悉自己负责的模块应用, 依据历史沉淀的文档, 花费大量时间也很难系统的理清应用接口之间复杂的关系.<br>
为了解决上面遇到的问题, 我们尝试建设系统的业务技术图谱来降低上手被测应用的难度和提高效率</p>
<h1 id="三-实践">三 实践</h1>
<p>通过和新同学的沟通和日常的工作情况, 我们总结了几个核心诉求:<br>
1 支持应用关系的上下游括扑图查询<br>
2 支持查询接口注释信息, 出入参信息<br>
3 支持查询接口和数据库表的关系<br>
4 支持查询rpc接口间的调用时序时序图</p>
<h2 id="实现思路">实现思路</h2>
<p>公司内部的rpc接口都为dubbo接口, 生产者应用的dubbo接口肯定为消费者应用接口方法的末节点方法, 我们拿到消费者应用接口调用链的末方法节点和生产者应用的开放dubbo接口进行匹配即可得到两个应用的rpc上下游关系.<br>
例如下图一消费者代码引用了dubbo服务, 代码暴露出去的Http接口DemoConsumerController sayHello链路中末方法节点为DemoService的sayHello的Dubbo接口, 即DemoService接口的sayHello方法为DemoConsumerController sayHello Http接口的下游rpc接口<br>
<img src="https://chenjf-cn.github.io/chenjf.github.io//post-images/1660284650459.png" alt="" loading="lazy"></p>
<h2 id="整体设计方案">整体设计方案</h2>
<figure data-type="image" tabindex="1"><img src="https://chenjf-cn.github.io/chenjf.github.io//post-images/1660284662127.png" alt="" loading="lazy"></figure>
<h2 id="实现步骤">实现步骤</h2>
<p>● 基于开源的Jgit框架拉取全部业务工程代码<br>
● 扫描Java源文件通过Java parse将源码转换成抽象语法树, 拿到所有类信息及注释及返回的数据bean存储到redis<br>
● 通过Maven Invoker编译工程得到Class字节码文件<br>
● 扫描dubbo_provider.xml的配置信息和@Service @DubboService @Component @RestController @Controller等一些列注解得到Http接口和Dubbo接口入口<br>
● 扫描mybatis_mapper.xml和mybatis注解将dao层方法和数据表关联<br>
● 通过字节码指令分析生成全部应该调用链,  分析全量的数据进行全部应用的首尾节点匹配,得到所有rpc的上下游关系落库<br>
● Java每个线程中方法执行存储为栈结构, 方法的调用具有顺序关系, 也就是时间关系, 因此可以将链表转换成图结构形成时序图</p>
<h2 id="结果展示">结果展示</h2>
<h3 id="应用的上下游和括扑图">应用的上下游和括扑图</h3>
<figure data-type="image" tabindex="2"><img src="https://chenjf-cn.github.io/chenjf.github.io//post-images/1660284688950.png" alt="" loading="lazy"></figure>
<h3 id="rpc接口上下游调用关系">rpc接口上下游调用关系</h3>
<figure data-type="image" tabindex="3"><img src="https://chenjf-cn.github.io/chenjf.github.io//post-images/1660284700705.png" alt="" loading="lazy"></figure>
<h3 id="接口调用时序业务图">接口调用时序业务图</h3>
<figure data-type="image" tabindex="4"><img src="https://chenjf-cn.github.io/chenjf.github.io//post-images/1660284717020.png" alt="" loading="lazy"></figure>
<h3 id="接口和数据库表关联">接口和数据库表关联</h3>
<p>未完待续</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前言]]></title>
        <id>https://chenjf-cn.github.io/chenjf.github.io/post/qian-yan/</id>
        <link href="https://chenjf-cn.github.io/chenjf.github.io/post/qian-yan/">
        </link>
        <updated>2017-04-11T06:19:11.000Z</updated>
        <content type="html"><![CDATA[<p>本站专注于质量保障和效能方向的内容建设, 记录日常工作的思考和问题的解决方案.<br>
作者是混迹多家互联网公司的测试从业者<br>
联系方式: 794297522 (QQ) 加好友请备注来意.</p>
]]></content>
    </entry>
</feed>